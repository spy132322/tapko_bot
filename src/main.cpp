#include <regex>
#include "libs/postgres/postgresql.h"
#include <string>
#include "libs/json.hpp"
#include "libs/messages.cpp"
#include <fstream>
#include <thread>
#include <tgbot/tgbot.h>
using json = nlohmann::json;
psql::DB db;
bool is_safe_input(const std::string &input);
bool isInterger(std::string &a)

    int main()
{
  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á –±–æ—Ç–∞
  std::ifstream conf("config.json");
  json config = json::parse(conf);
  conf.close();

  // –ò–Ω–∏—Ç –ë–æ—Ç–∏–Ω–∫–∞
  TgBot::Bot bot(config["bot"].get<std::string>());
  // –ò–Ω–Ω–∏—Ç –∫–æ–º–º–∞–Ω–¥
  bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message)
                            { 
    bot.getApi().sendMessage(message->chat->id, messages::hello_message); 
    db.new_user(message->chat->id, message->chat->firstName, message->chat->username); });
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.getEvents().onCommand("info", [&bot](TgBot::Message::Ptr message)
                            { bot.getApi().sendMessage(message->chat->id, messages::info_message); });
  // –î–æ–±–∞–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –≤ –ë–î
  bot.getEvents().onCommand("add", [&bot](TgBot::Message::Ptr message)
                            {
                              if (db.check_admin(message->chat->id))
                              {
                                std::cout << "[II] " << message->chat->username << "has used add command " + message->text << std::endl;
                                if (message->text.size() > 5 and is_safe_input(message->text.substr(5)))
                                {
                                  std::string setting = message->text.substr(5);
                                  int result = db.add(setting);
                                  switch (result)
                                  {
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–µ–∂—É—Ä–Ω—ã–π " + setting);
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω—ã–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è");
                                    break;
                                  }
                                }
                                else if (!is_safe_input(message->text.substr(5)))
                                {
                                  std::cout << "[WW] " << message->chat->username << "Tried to use SQL injection" << std::endl;
                                  bot.getApi().sendMessage(message->chat->id, "Nice try. Hah)");
                                }
                                else
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_add);
                                }
                              }
                              else
                              {
                                bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                              } });
  // –°–ø–∏—Å–æ–∫ –î–µ–∂—É—Ä–Ω—ã—Ö
  bot.getEvents().onCommand("list", [&bot](TgBot::Message::Ptr message)
                            {
                              std::cout << "[II] " << message->chat->firstName << "has used list command" << std::endl; 
                              std::vector<std::string> list;
                              list.push_back("üìã –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö:");
                              if (db.list()[0].Name != "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
                              {
                                for (auto &Guy : db.list())
                                {
                                  if (Guy.isKilled)
                                  {
                                    list.push_back(std::to_string(Guy.id) + ". " + Guy.Name + " üî¥ (–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω)");
                                  }
                                  else if (Guy.isWas and !Guy.isKilled)
                                  {
                                    list.push_back(std::to_string(Guy.id) + ". " + Guy.Name + " üü¢ (–î–æ—Å—Ç—É–ø–µ–Ω)  | –î–µ–∂—É—Ä–∏–ª: ‚úÖ");
                                  }
                                  else if (!Guy.isKilled and !Guy.isWas)
                                  {
                                    list.push_back(std::to_string(Guy.id) + ". " + Guy.Name + " üü¢ (–î–æ—Å—Ç—É–ø–µ–Ω)  | –î–µ–∂—É—Ä–∏–ª: ‚ùå");
                                  }
                                }
                                
                              }
                              else
                                {
                                  list[0] = "üìã –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.";
                                }
                              std::string message_to = "";
                              for (std::string strm : list)
                              {
                                message_to = message_to + strm + "\n";
                              }
                              bot.getApi().sendMessage(message->chat->id, message_to); });
  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –∏–∑ –ë–î
  bot.getEvents().onCommand("del", [&bot](TgBot::Message::Ptr message)
                            {
                              if (db.check_admin(message->chat->id))
                              {
                                std::cout << "[II] " << message->chat->username << "has used add command " + message->text << std::endl;
                                if (message->text.size() > 5 and isInterger(message->text.substr(5)))
                                {

                                  std::string setting = message->text.substr(5);
                                  int result = db.del(std::stoi(setting));
                                  switch (result)
                                  {
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–î–µ–∂—É—Ä–Ω—ã–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å ID: " + setting);
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è");
                                    break;
                                  }
                                }
                                else if(!isInterger(message->text.substr(5))){
                                  bot.getApi().sendMessage(message->chat->id, messages::wrong_params);
                                }
                                else
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_del);
                                }
                              }
                              else
                              {
                                bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                              } });
  try
  {
    printf("Bot username: %s\n", bot.getApi().getMe()->username.c_str());
    TgBot::TgLongPoll longPoll(bot);
    while (true)
    {
      printf("Long poll started\n");
      longPoll.start();
    }
  }
  catch (TgBot::TgException &e)
  {
    printf("error: %s\n", e.what());
  }
  return 0;
}
bool isInterger(std::string a)
{
  try
  {
    std::stoi(a);
    return true;
  }
  catch (std::exception &e)
  {
    return false;
  }
}
bool is_safe_input(const std::string &input)
{
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  std::regex dangerous_chars(R"([;\-\-'"\*\\/])");

  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
  if (std::regex_search(input, dangerous_chars))
  {
    return false;
  }

  return true;
}
