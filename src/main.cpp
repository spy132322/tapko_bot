#include <regex>
#include "libs/postgres/postgresql.h"
#include <string>
#include "libs/messages.cpp"
#include <fstream>
#include <thread>
#include <tgbot/tgbot.h>
#include <chrono>
#include <ctime>
#include <condition_variable>
#include <csignal>
#include <cstdlib>
volatile sig_atomic_t stop = 0;
bool skip = false;
bool fboot = true;
psql::DB db;
void Skip();
void noSkip();
bool is_safe_input(const std::string &input);
bool isInterger(std::string a);
bool isDate(std::string date);
void Updater();
void UpdateWatchers();
void UpdateMessage();
void sigterm(int signal);
void clearifend();
void autosender();

std::string bot_key = std::getenv("TGBOT_KEY");
// –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ
std::string curr_message = "üö® –î–µ–∂—É—Ä–Ω—ã—Ö –Ω–µ—Ç. –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö.";
int guys = 0;
struct wch
{
  std::vector<int> ids;
  std::vector<std::string> names;
};
struct time_s
{
  int year;
  int month;
  int day;
  int hour;
  int minute;
  int second;
  int milliseconds;
  int weekday;
};
wch current_watchers;
wch old_watchers;
time_s Time;
bool get_curr_time();
int main()
{
  // –ò–Ω–∏—Ç –ë–æ—Ç–∏–Ω–∫–∞
  TgBot::Bot bot(bot_key);
  // –ò–Ω–Ω–∏—Ç –∫–æ–º–º–∞–Ω–¥
  bot.getEvents().onCommand("start", [&bot](TgBot::Message::Ptr message)
                            { 
    bot.getApi().sendMessage(message->chat->id, messages::hello_message); 
    db.new_user(message->chat->id, message->chat->firstName, message->chat->username); });
  // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  bot.getEvents().onCommand("info", [&bot](TgBot::Message::Ptr message)
                            { bot.getApi().sendMessage(message->chat->id, messages::info_message); });
  // –î–æ–±–∞–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω–æ–≥–æ –≤ –ë–î
  bot.getEvents().onCommand("add", [&bot](TgBot::Message::Ptr message)
                            {
                              if (db.check_admin(message->chat->id))
                              {
                                std::cout << "[II] " << message->chat->username << " has used add command " + message->text << std::endl;
                                if (message->text.size() > 4 and is_safe_input(message->text.substr(5)))
                                {
                                  std::string setting = message->text.substr(5);
                                  int result = db.add(setting);
                                  switch (result)
                                  {
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –¥–µ–∂—É—Ä–Ω—ã–π " + setting);
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω—ã–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è");
                                    break;
                                  }
                                }
                                else if(message->text.size() <= 4)
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_add);
                                }
                                else
                                {
                                  std::cout << "[WW] " << message->chat->username << " Tried to use SQL injection" << std::endl;
                                  bot.getApi().sendMessage(message->chat->id, "Nice try. Hah)");
                                }
                              }
                              else
                              {
                                bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                              } });
  bot.getEvents().onCommand("help", [&bot](TgBot::Message::Ptr message)
                            {
                                std::cout << "[II] " + message->chat->username + " has used help command" << std::endl;
                                if (db.check_admin(message->chat->id)){
                                  bot.getApi().sendMessage(message->chat->id, messages::help_admin,nullptr,nullptr,nullptr,"markdown");
                                }
                                else
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::help_users,nullptr,nullptr,nullptr,"markdown");
                                } });
  // –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É
  bot.getEvents().onCommand("enable", [&bot](TgBot::Message::Ptr message)
                            {
                                int result = db.enable(message->chat->id);
                                std::cout << "[II] " << message->chat->username << " has used enable command " + message->text << std::endl;
                                switch (result){
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞.");
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /start.");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞.");
                                    break;
                                } });
  // –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É
  bot.getEvents().onCommand("disable", [&bot](TgBot::Message::Ptr message)
                            {
                                int result = db.enable(message->chat->id);
                                std::cout << "[II] " << message->chat->username << " has used disable command " + message->text << std::endl;
                                switch (result){
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞.");
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–∞–Ω–¥—É /start.");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.\n –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.");
                                    break;
                                } });
  // –°–ø–∏—Å–æ–∫ –î–µ–∂—É—Ä–Ω—ã—Ö
  bot.getEvents().onCommand("list", [&bot](TgBot::Message::Ptr message)
                            {
                              std::cout << "[II] " << message->chat->firstName << " has used list command" << std::endl; 
                              std::vector<std::string> list;
                              list.push_back(R"(üìã –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö:
```
ID |    –ò–º—è    | –°–æ—Å—Ç–æ—è–Ω–∏–µ
                                )");
                              if (db.list()[0].Name != "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
                              {
                                for (auto &Guy : db.list())
                                {
                                  std::string name = Guy.Name;
                                  std::string id = std::to_string(Guy.id);
                                  while(name.size() < 11){
                                    name = name + " ";
                                  }
                                  while(id.size() < 3){
                                    name = name + " ";
                                  }
                                  if (Guy.isKilled)
                                  {
                                    list.push_back(std::to_string(Guy.id) + "|" + name + "| üî¥ (–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω)");
                                  }
                                  if (Guy.isWas and !Guy.isKilled)
                                  {
                                    list.push_back(std::to_string(Guy.id) + "|" + name + "| üü¢ (–î–æ—Å—Ç—É–ø–µ–Ω)  | –ë—ã–ª–æ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: ‚úÖ");
                                  }
                                  if (!Guy.isKilled and !Guy.isWas)
                                  {
                                    list.push_back(std::to_string(Guy.id) + "|" + name + "| üü¢ (–î–æ—Å—Ç—É–ø–µ–Ω)  | –ë—ã–ª–æ –¥–µ–∂—É—Ä—Å—Ç–≤–æ: ‚ùå");
                                  }
                                }
                                
                              }
                              else
                                {
                                  list[0] = "üìã –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.";
                                }
                              std::string message_to = "";
                              for (std::string strm : list)
                              {
                                message_to = message_to + strm + "\n";
                              }
                              bot.getApi().sendMessage(message->chat->id, message_to); });
  // –£–¥–∞–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –∏–∑ –ë–î
  bot.getEvents().onCommand("del", [&bot](TgBot::Message::Ptr message)
                            {
                              if (db.check_admin(message->chat->id))
                              {
                                std::cout << "[II] " << message->chat->username << " has used add command " + message->text << std::endl;
                                if (message->text.size() > 5 and isInterger(message->text.substr(5)))
                                {

                                  std::string setting = message->text.substr(5);
                                  int result = db.del(std::stoi(setting));
                                  switch (result)
                                  {
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–î–µ–∂—É—Ä–Ω—ã–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω —Å ID: " + setting);
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è");
                                    break;
                                  }
                                }
                                else if(message->text.size() <= 4)
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_del);
                                }
                                else {
                                  bot.getApi().sendMessage(message->chat->id, messages::wrong_params);
                                }
                              }
                              else
                              {
                                bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                              } });
  // Add date bot command
  bot.getEvents().onCommand("add_date", [&bot](TgBot::Message::Ptr message)
                            {
                              if (db.check_admin(message->chat->id))
                              {
                                std::cout << "[II] " << message->chat->username << " has used add_date command " + message->text << std::endl;
                                if (message->text.size() > 10 and isDate(message->text.substr(10)))
                                {
                                  std::string setting = message->text.substr(10);
                                  int result = db.add_date(setting);
                                  switch (result)
                                  {
                                  case 0:
                                    bot.getApi().sendMessage(message->chat->id, "–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ " + setting + " –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è");
                                    break;
                                  case 1:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–∞—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                    break;
                                  case 2:
                                    bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è");
                                    break;
                                  }
                                }
                                else if (!isDate(message->text.substr(10)))
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::wrong_params_add_date);
                                }
                                else
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_add_date);
                                }
                              }
                              else
                              {
                                bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                              } });
  // List dates
  bot.getEvents().onCommand("list_dates", [&bot](TgBot::Message::Ptr message)
                            {
                              std::cout << "[II] " << message->chat->firstName << " has used list_date command" << std::endl; 
                              std::vector<std::string> list;
                              list.push_back("üìã –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–∞—Ç:");
                              if (db.list_dates()[0] != "LIE" and db.list_dates()[0] != "EE")
                              {
                                for(std::string a : db.list_dates()){
                                  list.push_back(a);
                                }
                                
                              }
                              else if(db.list_dates()[0] == "LIE")
                                {
                                  list[0] = "üìã –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞—Ç –ø—É—Å—Ç. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.";
                                }
                              else{
                                list[0] = "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è.";
                              }
                              std::string message_to = "";
                              for (std::string strm : list)
                              {
                                message_to = message_to + strm + "\n";
                              }
                              bot.getApi().sendMessage(message->chat->id, message_to); });
  // –£–¥–∞–ª–∏–∏—Ç —Å–µ–±—è –¥–∞—Ç—É
  bot.getEvents().onCommand("del_date", [&bot](TgBot::Message::Ptr message)
                            {
                                if (db.check_admin(message->chat->id))
                                {
                                  std::cout << "[II] " << message->chat->username << " has used del_date command " + message->text << std::endl;
                                  if (message->text.size() > 10 and isDate(message->text.substr(10)))
                                  {
                                    std::string setting = message->text.substr(10);
                                    int result = db.del_date(setting);
                                    switch (result)
                                    {
                                    case 0:
                                      bot.getApi().sendMessage(message->chat->id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –¥–∞—Ç–∞ " + setting + " –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π");
                                      break;
                                    case 1:
                                      bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                      break;
                                    case 2:
                                      bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —É–¥–∞–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–µ —É–¥–∞—á–Ω–æ ‚ö†Ô∏è");
                                      break;
                                    }
                                  }
                                  else if (!isDate(message->text.substr(10)))
                                  {
                                    bot.getApi().sendMessage(message->chat->id, messages::wrong_params_del_date);
                                  }
                                  else
                                  {
                                    bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_del_date);
                                  }
                                }
                                else
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                                } });
  // –¢–µ–∫—É—â–∏–µ –¥–µ–∂—É—Ä–Ω—ã–µ
  bot.getEvents().onCommand("current", [&bot](TgBot::Message::Ptr message)
                            { 
                              std::cout << "[II] " << message->chat->id << " has used /current command" << std::endl;
                              bot.getApi().sendMessage(message->chat->id, curr_message); });
  bot.getEvents().onCommand("skip", [&bot](TgBot::Message::Ptr message)
                            {
                              if (db.check_admin(message->chat->id))
                              {
                                skip = true;
                                std::string names = "";
                                  for (std::string a : current_watchers.names){
                                    names = names + " " + a;
                                  }
                                  UpdateWatchers();
                                  std::cout << "[II] " << message->chat->id << " has used /skip command" << std::endl;
                                  bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã —É—á–µ–Ω–∏–∫–∏:" + names + " - —Å –æ—Ç–º–µ—Ç–∫–æ–π, —á—Ç–æ –¥–µ–∂—É—Ä–∏–ª–∏. ‚ö†Ô∏è" );
                              }
                              else
                              {
                                bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                              } });
  bot.getEvents().onCommand("pass", [&bot](TgBot::Message::Ptr message)
                            {
                                if (db.check_admin(message->chat->id))
                                {
                                  std::string names = "";
                                  for (std::string a : current_watchers.names){
                                    names = names + " " + a;
                                  }
                                  UpdateWatchers();
                                  std::cout << "[II] " << message->chat->id << " has used /pass command" << std::endl;
                                  bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã —É—á–µ–Ω–∏–∫–∏:" + names + " - —Å –æ—Ç–º–µ—Ç–∫–æ–π, —á—Ç–æ –¥–µ–∂—É—Ä–∏–ª–∏. ‚ö†Ô∏è" );
                                }
                                else
                                {
                                  bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                                } });
  // Kill
  bot.getEvents().onCommand("kill", [&bot](TgBot::Message::Ptr message)
                            {
                                  if (db.check_admin(message->chat->id))
                                  {
                                    std::cout << "[II] " << message->chat->username << " has used kill command " + message->text << std::endl;
                                    if (message->text.size() > 6 and isInterger(message->text.substr(6)))
                                    {
    
                                      std::string setting = message->text.substr(6);
                                      int result = db.Kill(std::stoi(setting));
                                      switch (result)
                                      {
                                      case 0:
                                        bot.getApi().sendMessage(message->chat->id, "–î–µ–∂—É—Ä–Ω—ã–π —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å ID: " + setting);
                                        break;
                                      case 1:
                                        bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                        break;
                                      case 2:
                                        bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —É–¥–∞—á–Ω–∞ ‚ö†Ô∏è");
                                        break;
                                      }
                                    }
                                    else if(message->text.size() <= 5)
                                    {
                                      bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_kill);
                                    }
                                    else {
                                      bot.getApi().sendMessage(message->chat->id, messages::wrong_params_kill);
                                    }
                                  }
                                  else
                                  {
                                    bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                                  } });
  // unkill
  bot.getEvents().onCommand("unkill", [&bot](TgBot::Message::Ptr message)
                            {
                                    if (db.check_admin(message->chat->id))
                                    {
                                      std::cout << "[II] " << message->chat->username << " has used unkill command " + message->text << std::endl;
                                      if (message->text.size() > 7 and isInterger(message->text.substr(7)))
                                      {
      
                                        std::string setting = message->text.substr(7);
                                        int result = db.unKill(std::stoi(setting));
                                        switch (result)
                                        {
                                        case 0:
                                          bot.getApi().sendMessage(message->chat->id, "–î–µ–∂—É—Ä–Ω—ã–π —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å ID: " + setting);
                                          break;
                                        case 1:
                                          bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                          break;
                                        case 2:
                                          bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —É–¥–∞—á–Ω–∞ ‚ö†Ô∏è");
                                          break;
                                        }
                                      }
                                      else if(message->text.size() <= 6)
                                      {
                                        bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_unkill);
                                      }
                                      else {
                                        bot.getApi().sendMessage(message->chat->id, messages::wrong_params_unkill);
                                      }
                                    }
                                    else
                                    {
                                      bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                                    } });
  // set
  bot.getEvents().onCommand("set", [&bot](TgBot::Message::Ptr message)
                            {
                                      if (db.check_admin(message->chat->id))
                                      {
                                        std::cout << "[II] " << message->chat->username << " has used unset command " + message->text << std::endl;
                                        if (message->text.size() > 5 and isInterger(message->text.substr(5)))
                                        {
        
                                          std::string setting = message->text.substr(5);
                                          int result = db.SetWas(std::stoi(setting));
                                          switch (result)
                                          {
                                          case 0:
                                            bot.getApi().sendMessage(message->chat->id, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –Ω–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å ID: " + setting);
                                            break;
                                          case 1:
                                            bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                            break;
                                          case 2:
                                            bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –Ω–µ —É–¥–∞—á–Ω–∞ ‚ö†Ô∏è");
                                            break;
                                          }
                                        }
                                        else if(message->text.size() <= 4)
                                        {
                                          bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_unset);
                                        }
                                        else {
                                          bot.getApi().sendMessage(message->chat->id, messages::wrong_params_unset);
                                        }
                                      }
                                      else
                                      {
                                        bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                                      } });
  // unset
  bot.getEvents().onCommand("unset", [&bot](TgBot::Message::Ptr message)
                            {
                                        if (db.check_admin(message->chat->id))
                                        {
                                          std::cout << "[II] " << message->chat->username << " has used unset command " + message->text << std::endl;
                                          if (message->text.size() > 7 and isInterger(message->text.substr(7)))
                                          {
          
                                            std::string setting = message->text.substr(6);
                                            int result = db.UnSetWas(std::stoi(setting));
                                            switch (result)
                                            {
                                            case 0:
                                              bot.getApi().sendMessage(message->chat->id, "–£–±—Ä–∞–Ω–∞ –æ—Ç–º–µ—Ç–∫–∞ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –Ω–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ —Å ID: " + setting);
                                              break;
                                            case 1:
                                              bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –î–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚ö†Ô∏è");
                                              break;
                                            case 2:
                                              bot.getApi().sendMessage(message->chat->id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, —É–±–æ—Ä–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –Ω–µ —É–¥–∞—á–Ω–∞ ‚ö†Ô∏è");
                                              break;
                                            }
                                          }
                                          else if(message->text.size() <= 6)
                                          {
                                            bot.getApi().sendMessage(message->chat->id, messages::not_enough_params_unset);
                                          }
                                          else {
                                            bot.getApi().sendMessage(message->chat->id, messages::wrong_params_unset);
                                          }
                                        }
                                        else
                                        {
                                          bot.getApi().sendMessage(message->chat->id, messages::not_enough_rights);
                                        } });
  UpdateWatchers();
  std::signal(SIGTERM, sigterm);
  std::thread updater(Updater);
  std::thread autosend(autosender);
  while (!stop)
  {
    try
    {
      printf("[II] Bot username: %s\n", bot.getApi().getMe()->username.c_str());
      TgBot::TgLongPoll longPoll(bot);
      while (true)
      {
        longPoll.start();
      }
    }
    catch (TgBot::TgException &e)
    {
      printf("error: %s\n", e.what());
    }
  }
  return 0;
}
bool isDate(std::string date)
{
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
  if (date.size() != 10 || date[4] != '-' || date[7] != '-')
  {
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–¥, –º–µ—Å—è—Ü –∏ –¥–µ–Ω—å ‚Äî —á–∏—Å–ª–∞
  std::string year = date.substr(0, 4);
  std::string month = date.substr(5, 2);
  std::string day = date.substr(8, 2);

  if (!isInterger(year) || !isInterger(month) || !isInterger(day))
  {
    return false;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–∞ –∏ –¥–Ω—è
  int monthValue = std::stoi(month);
  int dayValue = std::stoi(day);

  if (monthValue < 1 || monthValue > 12)
  {
    return false;
  }

  if (dayValue < 1 || dayValue > 31)
  {
    return false;
  }

  return true;
}
bool isInterger(std::string a)
{
  try
  {
    std::stoi(a);
    return true;
  }
  catch (std::exception &e)
  {
    return false;
  }
}
// SQL Injection test
bool is_safe_input(const std::string &input)
{
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
  std::regex dangerous_chars(R"([;\-\-'"\*\\/])");

  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
  if (std::regex_search(input, dangerous_chars))
  {
    return false;
  }

  return true;
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö –≤ 12 –Ω–æ—á–∏
void Updater()
{

  while (!stop)
  {
    get_curr_time();

    bool can_update = true;
    if ((db.list_dates().at(0) != "LIE") and (db.list_dates().at(0) != "EE"))
    {
      for (auto &Date : db.list_dates())
      {
        if (Time.year == std::stoi(Date.substr(0, 4)) and Time.month == std::stoi(Date.substr(5, 2)) and Time.day == std::stoi(Date.substr(8, 2)))
        {
          can_update = false;
        }
      }
    }
    if (Time.weekday == 0)
    {
      can_update = false;
    }
    if (Time.hour == 0 and can_update)
    {
      std::cout << "[II] Automatic update watchers started" << std::endl;
      UpdateWatchers();
    }
    std::this_thread::sleep_for(std::chrono::minutes(30));
  }
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω—ã—Ö
void UpdateWatchers()
{
  clearifend();
  if (db.list().size() > guys)
  {

    int alive = 0;
    for (auto &Guy : db.list())
    {
      if (!Guy.isKilled and !Guy.isWas)
      {
        alive++;
      }
    }
    if (alive >= guys)
    {
      current_watchers.ids.clear();
      current_watchers.names.clear();
      int max = 0;
      for (auto &Guy : db.list())
      {
        bool old = false;
        if (!old_watchers.ids.empty())
        {
          for (int i : old_watchers.ids)
          {
            if (Guy.id == i)
            {
              old = true;
              break;
            }
          }
        }
        if (max != guys and !old and (!Guy.isWas and !Guy.isKilled))
        {
          max++;
          current_watchers.ids.push_back(Guy.id);
          current_watchers.names.push_back(Guy.Name);
        }
        else if (max != guys and !old and (Guy.isKilled))
        {
          max++;
        }
        if (max == guys)
        {
          break;
        }
      }
    }
    else
    {
      int max = 0;
      current_watchers.ids.clear();
      current_watchers.names.clear();
      for (auto &Guy : db.list())
      {
        bool old = false;
        if (!old_watchers.ids.empty())
        {
          for (int i : old_watchers.ids)
          {
            if (Guy.id == i)
            {
              old = true;
              break;
            }
          }
        }
        if (max != alive and (!Guy.isWas and !Guy.isKilled))
        {
          max++;
          current_watchers.ids.push_back(Guy.id);
          current_watchers.names.push_back(Guy.Name);
        }
        else if (max != alive and (Guy.isKilled))
        {
          max++;
        }
        if (max == alive)
        {
          break;
        }
      }
    }
    if (!skip)
    {
      noSkip();
    }
    else
    {
      Skip();
    }
    skip = false;
    UpdateMessage();
  }
}
void clearifend()
{
  if (!fboot)
  {
    if (current_watchers.ids.at(0) >= db.list().size() - guys)
    {
      db.clearall();
      old_watchers.ids.clear();
    }
  }
}
// –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
void UpdateMessage()
{
  
  if (db.list()[0].Name == "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
  {
    curr_message = "üö® –î–µ–∂—É—Ä–Ω—ã—Ö –Ω–µ—Ç. –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö.";
  }
  else
  {
    curr_message = "üö® –¢–µ–∫—É—â–∏–µ –¥–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n";
    std::cout << db.list().size() << std::endl;
    for (std::string a : current_watchers.names)
    {
      curr_message = curr_message + a + "\n";
    }
  }
}
// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–∂—É—Ä–µ–≤—à–∏—Ö
void Skip()
{

  old_watchers.ids.clear();
  for (int id : current_watchers.ids)
  {
    old_watchers.ids.push_back(id);
  }
  for (std::string Name : old_watchers.names)
  {
    std::cout << Name << std::endl;
  }
}
void noSkip()
{
  if (!fboot)
  {
    for (int id : old_watchers.ids)
    {
      db.SetWas(id);
    }
  }
  old_watchers.ids.clear();
  for (int id : current_watchers.ids)
  {

    old_watchers.ids.push_back(id);
  }
  if (fboot)
  {
    fboot = false;
  }
}
// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
bool get_curr_time()
{
  try
  {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    auto now = std::chrono::system_clock::now();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ time_t
    std::time_t now_time_t = std::chrono::system_clock::to_time_t(now);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º time_t –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    std::tm now_tm = *std::localtime(&now_time_t);

    // –ü–æ–ª—É—á–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    auto milliseconds = std::chrono::duration_cast<std::chrono::milliseconds>(
                            now.time_since_epoch()) %
                        1000;

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Time
    Time.year = now_tm.tm_year + 1900;        // –ì–æ–¥ (–Ω–∞—á–∏–Ω–∞—è —Å 1900)
    Time.month = now_tm.tm_mon + 1;           // –ú–µ—Å—è—Ü (0-11 -> 1-12)
    Time.day = now_tm.tm_mday;                // –î–µ–Ω—å –º–µ—Å—è—Ü–∞
    Time.hour = now_tm.tm_hour;               // –ß–∞—Å—ã
    Time.minute = now_tm.tm_min;              // –ú–∏–Ω—É—Ç—ã
    Time.second = now_tm.tm_sec;              // –°–µ–∫—É–Ω–¥—ã
    Time.milliseconds = milliseconds.count(); // –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    Time.weekday = now_tm.tm_wday;            // –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    return true;
  }
  catch (std::exception &e)
  {
    std::cout << "[EE] Error reading time " << e.what() << std::endl;
    return false;
  }
}
void sigterm(int signal)
{
  if (signal == SIGTERM)
  {
    std::cout << "[II] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª —Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏, –≤—ã–∫–ª—é—á–∞—é –ø—Ä–æ—Ü—Ü–µ—Å—Å—ã." << std::endl;
    stop = 1;
  }
}
// –ê–≤—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∫–∞
void autosender()
{
  int aminute = 0;
  int ahour = 0;
  if(std::getenv("AUTO_HOUR") and std::getenv("AUTO_MINUTE")){
  ahour = std::stoi(std::getenv("AUTO_HOUR"));
  aminute = std::stoi(std::getenv("AUTO_MINUTE"));
  }else{
    exit(-1);
  }
  TgBot::Bot bot(bot_key);
  std::cout << "[II] Starting autosend thread" << std::endl;
  while (!stop)
  {
    get_curr_time();

    if (Time.second == 0 or Time.second > 40)
    {
      std::cout << "[II] Balancing time on autosender +20 sec" << std::endl;
      std::this_thread::sleep_for(std::chrono::seconds(20));
    }
    // –í—ã–±–∏—Ä–∞–ª –≤—Ä–µ–º—è –°–≤—è—Ç–∏–∫!!!!!
    if (!db.list_users().empty() and Time.hour == ahour and Time.minute == aminute)
    {
      std::cout << "[II] Running autosend thread" << std::endl;
      for (int64_t id : db.list_users())
      {
        std::cout << "[II] Sending current to " << id << std::endl;
        bot.getApi().sendMessage(id, curr_message);
      }
    }
    std::this_thread::sleep_for(std::chrono::seconds(60));
  }
}